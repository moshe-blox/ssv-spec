// Code generated by fastssz. DO NOT EDIT.
// Hash: 0d53ed48a7f0b5a1f5c9fd96645c591528b1ee019e812cadb98a6a6e71932152
// Version: 0.1.2
package types

import (
	"github.com/attestantio/go-eth2-client/spec"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Contribution object
func (c *Contribution) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Contribution object to a target array
func (c *Contribution) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(100)

	// Field (0) 'SelectionProofSig'
	dst = append(dst, c.SelectionProofSig[:]...)

	// Offset (1) 'Contribution'
	dst = ssz.WriteOffset(dst, offset)
	offset += c.Contribution.SizeSSZ()

	// Field (1) 'Contribution'
	if dst, err = c.Contribution.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Contribution object
func (c *Contribution) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 100 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'SelectionProofSig'
	copy(c.SelectionProofSig[:], buf[0:96])

	// Offset (1) 'Contribution'
	if o1 = ssz.ReadOffset(buf[96:100]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 100 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Contribution'
	{
		buf = tail[o1:]
		if err = c.Contribution.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Contribution object
func (c *Contribution) SizeSSZ() (size int) {
	size = 100

	// Field (1) 'Contribution'
	size += c.Contribution.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the Contribution object
func (c *Contribution) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Contribution object with a hasher
func (c *Contribution) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SelectionProofSig'
	hh.PutBytes(c.SelectionProofSig[:])

	// Field (1) 'Contribution'
	if err = c.Contribution.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Contribution object
func (c *Contribution) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the ConsensusData object
func (c *ConsensusData) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ConsensusData object to a target array
func (c *ConsensusData) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(20)

	// Offset (0) 'Duty'
	dst = ssz.WriteOffset(dst, offset)
	offset += c.Duty.SizeSSZ()

	// Field (1) 'Version'
	dst = ssz.MarshalUint64(dst, uint64(c.Version))

	// Offset (2) 'PreConsensusJustifications'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.PreConsensusJustifications); ii++ {
		offset += 4
		offset += c.PreConsensusJustifications[ii].SizeSSZ()
	}

	// Offset (3) 'DataSSZ'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.DataSSZ)

	// Field (0) 'Duty'
	if dst, err = c.Duty.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'PreConsensusJustifications'
	if size := len(c.PreConsensusJustifications); size > 13 {
		err = ssz.ErrListTooBigFn("ConsensusData.PreConsensusJustifications", size, 13)
		return
	}
	{
		offset = 4 * len(c.PreConsensusJustifications)
		for ii := 0; ii < len(c.PreConsensusJustifications); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.PreConsensusJustifications[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.PreConsensusJustifications); ii++ {
		if dst, err = c.PreConsensusJustifications[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (3) 'DataSSZ'
	if size := len(c.DataSSZ); size > 1073807360 {
		err = ssz.ErrBytesLengthFn("ConsensusData.DataSSZ", size, 1073807360)
		return
	}
	dst = append(dst, c.DataSSZ...)

	return
}

// UnmarshalSSZ ssz unmarshals the ConsensusData object
func (c *ConsensusData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 20 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o2, o3 uint64

	// Offset (0) 'Duty'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 20 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (1) 'Version'
	c.Version = spec.DataVersion(ssz.UnmarshallUint64(buf[4:12]))

	// Offset (2) 'PreConsensusJustifications'
	if o2 = ssz.ReadOffset(buf[12:16]); o2 > size || o0 > o2 {
		return ssz.ErrOffset
	}

	// Offset (3) 'DataSSZ'
	if o3 = ssz.ReadOffset(buf[16:20]); o3 > size || o2 > o3 {
		return ssz.ErrOffset
	}

	// Field (0) 'Duty'
	{
		buf = tail[o0:o2]
		if err = c.Duty.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}

	// Field (2) 'PreConsensusJustifications'
	{
		buf = tail[o2:o3]
		num, err := ssz.DecodeDynamicLength(buf, 13)
		if err != nil {
			return err
		}
		c.PreConsensusJustifications = make([]*SignedPartialSignatureMessage, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.PreConsensusJustifications[indx] == nil {
				c.PreConsensusJustifications[indx] = new(SignedPartialSignatureMessage)
			}
			if err = c.PreConsensusJustifications[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (3) 'DataSSZ'
	{
		buf = tail[o3:]
		if len(buf) > 1073807360 {
			return ssz.ErrBytesLength
		}
		if cap(c.DataSSZ) == 0 {
			c.DataSSZ = make([]byte, 0, len(buf))
		}
		c.DataSSZ = append(c.DataSSZ, buf...)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ConsensusData object
func (c *ConsensusData) SizeSSZ() (size int) {
	size = 20

	// Field (0) 'Duty'
	size += c.Duty.SizeSSZ()

	// Field (2) 'PreConsensusJustifications'
	for ii := 0; ii < len(c.PreConsensusJustifications); ii++ {
		size += 4
		size += c.PreConsensusJustifications[ii].SizeSSZ()
	}

	// Field (3) 'DataSSZ'
	size += len(c.DataSSZ)

	return
}

// HashTreeRoot ssz hashes the ConsensusData object
func (c *ConsensusData) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ConsensusData object with a hasher
func (c *ConsensusData) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Duty'
	if err = c.Duty.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'Version'
	hh.PutUint64(uint64(c.Version))

	// Field (2) 'PreConsensusJustifications'
	{
		subIndx := hh.Index()
		num := uint64(len(c.PreConsensusJustifications))
		if num > 13 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.PreConsensusJustifications {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 13)
	}

	// Field (3) 'DataSSZ'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.DataSSZ))
		if byteLen > 1073807360 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.PutBytes(c.DataSSZ)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (1073807360+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ConsensusData object
func (c *ConsensusData) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
