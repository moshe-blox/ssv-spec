// Code generated by fastssz. DO NOT EDIT.
// Hash: 05bb6e4546e08e0dde25c35c8eb06ccd917170bcf0873cee472e5e54c746fdd3
// Version: 0.1.2
package types

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Operator object
func (o *Operator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the Operator object to a target array
func (o *Operator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'OperatorID'
	dst = ssz.MarshalUint64(dst, uint64(o.OperatorID))

	// Field (1) 'PubKey'
	if size := len(o.PubKey); size != 48 {
		err = ssz.ErrBytesLengthFn("Operator.PubKey", size, 48)
		return
	}
	dst = append(dst, o.PubKey...)

	return
}

// UnmarshalSSZ ssz unmarshals the Operator object
func (o *Operator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 56 {
		return ssz.ErrSize
	}

	// Field (0) 'OperatorID'
	o.OperatorID = OperatorID(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'PubKey'
	if cap(o.PubKey) == 0 {
		o.PubKey = make([]byte, 0, len(buf[8:56]))
	}
	o.PubKey = append(o.PubKey, buf[8:56]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Operator object
func (o *Operator) SizeSSZ() (size int) {
	size = 56
	return
}

// HashTreeRoot ssz hashes the Operator object
func (o *Operator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the Operator object with a hasher
func (o *Operator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'OperatorID'
	hh.PutUint64(uint64(o.OperatorID))

	// Field (1) 'PubKey'
	if size := len(o.PubKey); size != 48 {
		err = ssz.ErrBytesLengthFn("Operator.PubKey", size, 48)
		return
	}
	hh.PutBytes(o.PubKey)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Operator object
func (o *Operator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}
